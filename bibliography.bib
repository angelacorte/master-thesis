@article{10.1145/3579353,
	author = {Casadei, Roberto},
	title = {Macroprogramming: Concepts, State of the Art, and Opportunities of Macroscopic Behaviour Modelling},
	year = {2023},
	issue_date = {December 2023},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {55},
	number = {13s},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/3579353},
	doi = {10.1145/3579353},
	abstract = {Macroprogramming refers to the theory and practice of expressing the macro(scopic) behaviour of a collective system using a single program. Macroprogramming approaches are motivated by the need of effectively capturing global/system-level aspects and the collective behaviour of multiple computational components, while abstracting over low-level details. Previously, this programming style had been primarily adopted to describe the data-processing logic in sensor networks; recently, research forums on spatial computing, collective systems, and the Internet of Things have provided renewed interest in macro approaches. However, related contributions are still fragmented and lack conceptual consistency. Therefore, to foster principled research, an integrated view of the field is provided, together with opportunities and challenges.},
	journal = {ACM Comput. Surv.},
	month = {jul},
	articleno = {275},
	numpages = {37},
	keywords = {Macro programming, system-level programming, collective intelligence}
}

@article{10.1145/2363.2433,
	author = {Gelernter, David},
	title = {Generative communication in Linda},
	year = {1985},
	issue_date = {Jan. 1985},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {7},
	number = {1},
	issn = {0164-0925},
	url = {https://doi.org/10.1145/2363.2433},
	doi = {10.1145/2363.2433},
	abstract = {Generative communication is the basis of a new distributed programming langauge that is intended for systems programming in distributed settings generally and on integrated network computers in particular. It differs from previous interprocess communication models in specifying that messages be added in tuple-structured form to the computation environment, where they exist as named, independent entities until some process chooses to receive them. Generative communication results in a number of distinguishing properties in the new language, Linda, that is built around it. Linda is fully distributed in space and distributed in time; it allows distributed sharing, continuation passing, and structured naming. We discuss these properties and their implications, then give a series of examples. Linda presents novel implementation problems that we discuss in Part II. We are particularly concerned with implementation of the dynamic global name space that the generative communication model requires.},
	journal = {ACM Trans. Program. Lang. Syst.},
	month = {jan},
	pages = {80–112},
	numpages = {33}
}

@ARTICLE{865084,
	author={Cabri, G. and Leonardi, L. and Zambonelli, F.},
	journal={IEEE Internet Computing},
	title={MARS: a programmable coordination architecture for mobile agents},
	year={2000},
	volume={4},
	number={4},
	pages={26-35},
	keywords={Mars;Mobile agents;Mobile computing;Internet;IP networks;Computer networks;Context modeling;Data security;Mobile communication;Bandwidth},
	doi={10.1109/4236.865084}}


@article{VIROLI2019100486,
	abstract = {Aggregate computing is an emerging approach to the engineering of complex coordination for distributed systems, based on viewing system interactions in terms of information propagating through collectives of devices, rather than in terms of individual devices and their interaction with their peers and environment. The foundation of this approach is the distillation of a number of prior approaches, both formal and pragmatic, proposed under the umbrella of field-based coordination, and culminating into the field calculus, a universal functional programming model for the specification and composition of collective behaviours with equivalent local and aggregate semantics. This foundation has been elaborated into a layered approach to engineering coordination of complex distributed systems, building up to pragmatic applications through intermediate layers encompassing reusable libraries of program components. Furthermore, some of these components are formally shown to satisfy formal properties like self-stabilisation, which transfer to whole application services by functional composition. In this survey, we trace the development and antecedents of field calculus, review the field calculus itself and the current state of aggregate computing theory and practice, and discuss a roadmap of current research directions with implications for the development of a broad range of distributed systems.},
	author = {Mirko Viroli and Jacob Beal and Ferruccio Damiani and Giorgio Audrito and Roberto Casadei and Danilo Pianini},
	doi = {https://doi.org/10.1016/j.jlamp.2019.100486},
	issn = {2352-2208},
	journal = {Journal of Logical and Algebraic Methods in Programming},
	keywords = {Distributed systems, Aggregate computing, Field calculus, Spatial computing},
	pages = {100486},
	title = {From distributed coordination to field calculus and aggregate computing},
	url = {https://www.sciencedirect.com/science/article/pii/S235222081930032X},
	volume = {109},
	year = {2019},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S235222081930032X},
	bdsk-url-2 = {https://doi.org/10.1016/j.jlamp.2019.100486}}

@article{10.1145/1538942.1538945,
	author = {Mamei, Marco and Zambonelli, Franco},
	title = {Programming pervasive and mobile computing applications: The TOTA approach},
	year = {2009},
	issue_date = {July 2009},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {18},
	number = {4},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/1538942.1538945},
	doi = {10.1145/1538942.1538945},
	abstract = {Pervasive and mobile computing call for suitable middleware and programming models to support the activities of complex software systems in dynamic network environments. In this article we present TOTA (“Tuples On The Air”), a novel middleware and programming approach for supporting adaptive context-aware activities in pervasive and mobile computing scenarios. The key idea in TOTA is to rely on spatially distributed tuples, adaptively propagated across a network on the basis of application-specific rules, for both representing contextual information and supporting uncoupled interactions between application components. TOTA promotes a simple way of programming that facilitates access to distributed information, navigation in complex environments, and the achievement of complex coordination tasks in a fully distributed and adaptive way, mostly freeing programmers and system managers from the need to take care of low-level issues related to network dynamics. This article includes both application examples to clarify concepts and performance figures to show the feasibility of the approach},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	month = {jul},
	articleno = {15},
	numpages = {56},
	keywords = {tuple spaces, self-organization, self-adaptation, mobile computing, middleware, coordination, Pervasive computing}
}

@INPROCEEDINGS{8795355,
	author={Casadei, Roberto and Viroli, Mirko},
	booktitle={2019 Fourth International Conference on Fog and Mobile Edge Computing (FMEC)},
	title={Coordinating Computation at the Edge: a Decentralized, Self-Organizing, Spatial Approach},
	year={2019},
	volume={},
	number={},
	pages={60-67},
	keywords={edge computing;self-organization;decentralized computing;spatial computing;distributed coordination},
	doi={10.1109/FMEC.2019.8795355}}


@article{bdcc2020010,
	abstract = {With the rapid growth of Internet of Things (IoT) applications, the classic centralized cloud computing paradigm faces several challenges such as high latency, low capacity and network failure. To address these challenges, fog computing brings the cloud closer to IoT devices. The fog provides IoT data processing and storage locally at IoT devices instead of sending them to the cloud. In contrast to the cloud, the fog provides services with faster response and greater quality. Therefore, fog computing may be considered the best choice to enable the IoT to provide efficient and secure services for many IoT users. This paper presents the state-of-the-art of fog computing and its integration with the IoT by highlighting the benefits and implementation challenges. This review will also focus on the architecture of the fog and emerging IoT applications that will be improved by using the fog model. Finally, open issues and future research directions regarding fog computing and the IoT are discussed.},
	article-number = {10},
	author = {Atlam, Hany F. and Walters, Robert J. and Wills, Gary B.},
	doi = {10.3390/bdcc2020010},
	issn = {2504-2289},
	journal = {Big Data and Cognitive Computing},
	number = {2},
	title = {Fog Computing and the Internet of Things: A Review},
	url = {https://www.mdpi.com/2504-2289/2/2/10},
	volume = {2},
	year = {2018},
	bdsk-url-1 = {https://www.mdpi.com/2504-2289/2/2/10},
	bdsk-url-2 = {https://doi.org/10.3390/bdcc2020010}}


@article{fi12110203,
	abstract = {Emerging cyber-physical systems, such as robot swarms, crowds of augmented people, and smart cities, require well-crafted self-organizing behavior to properly deal with dynamic environments and pervasive disturbances. However, the infrastructures providing networking and computing services to support these systems are becoming increasingly complex, layered and heterogeneous&mdash;consider the case of the edge&ndash;fog&ndash;cloud interplay. This typically hinders the application of self-organizing mechanisms and patterns, which are often designed to work on flat networks. To promote reuse of behavior and flexibility in infrastructure exploitation, we argue that self-organizing logic should be largely independent of the specific application deployment. We show that this separation of concerns can be achieved through a proposed &ldquo;pulverization approach&rdquo;: the global system behavior of application services gets broken into smaller computational pieces that are continuously executed across the available hosts. This model can then be instantiated in the aggregate computing framework, whereby self-organizing behavior is specified compositionally. We showcase how the proposed approach enables expressing the application logic of a self-organizing cyber-physical system in a deployment-independent fashion, and simulate its deployment on multiple heterogeneous infrastructures that include cloud, edge, and LoRaWAN network elements.},
	article-number = {203},
	author = {Casadei, Roberto and Pianini, Danilo and Placuzzi, Andrea and Viroli, Mirko and Weyns, Danny},
	doi = {10.3390/fi12110203},
	issn = {1999-5903},
	journal = {Future Internet},
	number = {11},
	title = {Pulverization in Cyber-Physical Systems: Engineering the Self-Organizing Logic Separated from Deployment},
	url = {https://www.mdpi.com/1999-5903/12/11/203},
	volume = {12},
	year = {2020},
	bdsk-url-1 = {https://www.mdpi.com/1999-5903/12/11/203},
	bdsk-url-2 = {https://doi.org/10.3390/fi12110203}}


@inproceedings{10.1007/978-3-030-78142-2_18,
	abstract = {Field-based coordination is a model for expressing the coordination logic of large-scale adaptive systems, composing functional blocks from a global perspective. As for any coordination model, a proper toolchain must be developed to support its adoption across all development phases. Under this point of view, the ScaFi toolkit provides a coordination language (field calculus) as a DSL internal in the Scala language, a library of reusable building blocks, and an infrastructure for simulation of distributed deployments. In this work, we enrich such a toolchain by introducing ScaFi-Web, a web-based application allowing in-browser editing, execution, and visualisation of ScaFi programs. ScaFi-Web facilitates access to the ScaFi coordination technology by flattening the learning curve and simplifying configuration and requirements, thus promoting agile prototyping of field-based coordination specifications. In turn, this opens the door to easier demonstrations and experimentation, and also constitutes a stepping stone towards monitoring and control of simulated/deployed systems.},
	address = {Cham},
	author = {Aguzzi, Gianluca and Casadei, Roberto and Maltoni, Niccol{\`o} and Pianini, Danilo and Viroli, Mirko},
	booktitle = {Coordination Models and Languages},
	editor = {Damiani, Ferruccio and Dardha, Ornela},
	isbn = {978-3-030-78142-2},
	pages = {285--299},
	publisher = {Springer International Publishing},
	title = {ScaFi-Web: A Web-Based Application for Field-Based Coordination Programming},
	year = {2021}}


@article{CASADEI2022101248,
	abstract = {Supported by current socio-scientific trends, programming the global behaviour of whole computational collectives makes for great opportunities, but also significant challenges. Recently, aggregate computing has emerged as a prominent paradigm for so-called collective adaptive systems programming. To shorten the gap between such research endeavours and mainstream software development and engineering, we present ScaFi, a Scala toolkit providing an internal domain-specific language, libraries, a simulation environment, and runtime support for practical aggregate computing systems development.},
	author = {Roberto Casadei and Mirko Viroli and Gianluca Aguzzi and Danilo Pianini},
	doi = {https://doi.org/10.1016/j.softx.2022.101248},
	issn = {2352-7110},
	journal = {SoftwareX},
	keywords = {Aggregate programming, Computational fields, Macro-level programming, Distributed computing, Scala toolkit},
	pages = {101248},
	title = {ScaFi: A Scala DSL and Toolkit for Aggregate Programming},
	url = {https://www.sciencedirect.com/science/article/pii/S2352711022001662},
	volume = {20},
	year = {2022},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S2352711022001662},
	bdsk-url-2 = {https://doi.org/10.1016/j.softx.2022.101248}}


@inproceedings{10.1007/978-3-030-78198-9_10,
	abstract = {Many interesting systems in several disciplines can be modeled as networks of nodes that can store and exchange data: pervasive systems, edge computing scenarios, and even biological and bio-inspired systems. These systems feature inherent complexity, and often simulation is the preferred (and sometimes the only) way of investigating their behavior; this is true both in the design phase and in the verification and testing phase. In this tutorial paper, we provide a guide to the simulation of such systems by leveraging Alchemist, an existing research tool used in several works in the literature. We introduce its meta-model and its extensible architecture; we discuss reference examples of increasing complexity; and we finally show how to configure the tool to automatically execute multiple repetitions of simulations with different controlled variables, achieving reliable and reproducible results.},
	address = {Cham},
	author = {Pianini, Danilo},
	booktitle = {Distributed Applications and Interoperable Systems},
	editor = {Matos, Miguel and Greve, Fab{\'\i}ola},
	isbn = {978-3-030-78198-9},
	pages = {145--161},
	publisher = {Springer International Publishing},
	title = {Simulation of Large Scale Computational Ecosystems with Alchemist: A Tutorial},
	year = {2021}}


@inproceedings{10.1007/978-3-030-61470-6_21,
	abstract = {A recently proposed approach to the rigorous engineering of collective adaptive systems is the aggregate computing paradigm, which operationalises the idea of expressing collective adaptive behaviour by a global perspective as a functional composition of dynamic computational fields (i.e., structures mapping a collection of individual devices of a collective to computational values over time). In this paper, we present FScaFi, a core language that captures the essence of exploiting field computations in mainstream functional languages, and which is based on a semantic model for field computations leveraging the novel notion of ``computation against a neighbour''. Such a construct models expressions whose evaluation depends on the same evaluation that occurred on a neighbour, thus abstracting communication actions and, crucially, enabling deep and straightforward integration in the Scala programming language, by the ScaFi incarnation. We cover syntax and informal semantics of FScaFi, provide examples of collective adaptive behaviour development in ScaFi, and delineate future work.},
	address = {Cham},
	author = {Casadei, Roberto and Viroli, Mirko and Audrito, Giorgio and Damiani, Ferruccio},
	booktitle = {Leveraging Applications of Formal Methods, Verification and Validation: Engineering Principles},
	editor = {Margaria, Tiziana and Steffen, Bernhard},
	isbn = {978-3-030-61470-6},
	pages = {344--360},
	publisher = {Springer International Publishing},
	title = {FScaFi : A Core Calculus for Collective Adaptive Systems Programming},
	year = {2020}}

@INPROCEEDINGS{9935036,
	author={Aguzzi, Gianluca and Casadei, Roberto and Viroli, Mirko},
	booktitle={2022 IEEE International Conference on Autonomic Computing and Self-Organizing Systems (ACSOS)},
	title={Addressing Collective Computations Efficiency: Towards a Platform-level Reinforcement Learning Approach},
	year={2022},
	volume={},
	number={},
	pages={11-20},
	keywords={Training;Representation learning;Q-learning;Power demand;Runtime;Aggregates;Scheduling;Large-Scale Distributed Systems;Aggregate Computing;Reinforcement Learning},
	doi={10.1109/ACSOS55765.2022.00019}
}

@INPROCEEDINGS{10336236,
	author={Casadei, Roberto and Aguzzi, Gianluca and Pianini, Danilo and Viroli, Mirko},
	booktitle={2023 IEEE International Conference on Autonomic Computing and Self-Organizing Systems Companion (ACSOS-C)},
	title={Programming (and Learning) Self-Adaptive e Self-Organising Behaviour with ScaFi: for Swarms, Edge-Cloud Ecosystems, and More},
	year={2023},
	volume={},
	number={},
	pages={33-34},
	keywords={Adaptive systems;Aggregates;Ecosystems;Swarm robotics;Tutorials;Programming;Cyber-physical systems;self-organisation;macro-programming;aggregate computing;collective adaptive systems;swarm intelligence;edge-cloud ecosystems},
	doi={10.1109/ACSOS-C58168.2023.00032},
}

@inproceedings{protelis,
	author = {Pianini, Danilo and Viroli, Mirko and Beal, Jacob},
	title = {Protelis: practical aggregate programming},
	year = {2015},
	isbn = {9781450331968},
	url = {https://doi.org/10.1145/2695664.2695913},
	doi = {10.1145/2695664.2695913},
	abstract = {The notion of a computational field has been proposed as a unifying abstraction for developing distributed systems, focusing on the computations and coordination of aggregates of devices instead of individual behavior. Prior field-based languages, however, have suffered from a number of practical limitations that have posed barriers to adoption and use. We address these limitations by introduction of Protelis, a functional language based on computational fields and embedded in Java, thereby enabling the construction of widely reusable components of aggregate systems. We demonstrate the simplicity of Protelis integration and programming through two examples: simulation of a pervasive computing scenario in the Alchemist simulator [24], and coordinated management of a network of services.},
	booktitle = {Proceedings of the 30th Annual ACM Symposium on Applied Computing},
	pages = {1846–1853},
	keywords = {aggregate programming, alchemist, computational field, coordination, field calculus},
	series = {SAC '15}
}

@INPROCEEDINGS{9196401,
	author={Audrito, Giorgio},
	booktitle={2020 IEEE International Conference on Autonomic Computing and Self-Organizing Systems (ACSOS)},
	title={FCPP: an efficient and extensible Field Calculus framework},
	year={2020},
	volume={},
	number={},
	pages={153-159},
	keywords={Aggregates;Calculus;C++ languages;Tools;Programming;Cloud computing;Libraries;edge computing;aggregate computing;programming languages;field calculus;toolchains},
	doi={10.1109/ACSOS49614.2020.00037}
}


@inproceedings{fieldc,
	abstract = {Recent work in the area of coordination models and collective adaptive systems promotes a view of distributed computations as functional blocks manipulating data structures spread over space and evolving over time. In this paper, we address expressiveness issues of such computations, and specifically focus on the field calculus, a prominent emerging language in this context. Based on the classical notion of event structure, we introduce the cone Turing machine as a ground for studying computability issues, and first use it to prove that field calculus is space-time universal. We then observe that, in the most general case, field calculus computations can be rather inefficient in the size of messages exchanged, but this can be remedied by an encoding to nearly similar computations with slower information speed. We capture this concept by a notion of delayed space-time universality, which we prove to hold for the set of message-efficient algorithms expressible by field calculus. As a corollary, it is derived that field calculus can implement with message-size efficiency all self-stabilising distributed algorithms.},
	address = {Cham},
	author = {Audrito, Giorgio and Beal, Jacob and Damiani, Ferruccio and Viroli, Mirko},
	booktitle = {Coordination Models and Languages},
	editor = {Di Marzo Serugendo, Giovanna and Loreti, Michele},
	isbn = {978-3-319-92408-3},
	pages = {1--20},
	publisher = {Springer International Publishing},
	title = {Space-Time Universality of Field Calculus},
	year = {2018}}


@inproceedings{share,
	abstract = {Recent work in the area of coordination models and collective adaptive systems promotes a view of distributed computations as functions manipulating computational fields (data structures spread over space and evolving over time), and introduces the field calculus as a formal foundation for field computations. With the field calculus, evolution (time) and neighbor interaction (space) are handled by separate functional operators: however, this intrinsically limits the speed of information propagation that can be achieved by their combined use. In this paper, we propose a new field-based coordination operator called share, which captures the space-time nature of field computations in a single operator that declaratively achieves: (i) observation of neighbors' values; (ii) reduction to a single local value; and (iii) update and converse sharing to neighbors of a local variable. In addition to conceptual economy, use of the share operator also allows many prior field calculus algorithms to be greatly accelerated, which we validate empirically with simulations of a number of frequently used network propagation and collection algorithms.},
	address = {Cham},
	author = {Audrito, Giorgio and Beal, Jacob and Damiani, Ferruccio and Pianini, Danilo and Viroli, Mirko},
	booktitle = {Coordination Models and Languages},
	editor = {Riis Nielson, Hanne and Tuosto, Emilio},
	isbn = {978-3-030-22397-7},
	pages = {54--71},
	publisher = {Springer International Publishing},
	title = {The share Operator for Field-Based Coordination},
	year = {2019}}

@article{10.1145/3177774,
	author = {Viroli, Mirko and Audrito, Giorgio and Beal, Jacob and Damiani, Ferruccio and Pianini, Danilo},
	title = {Engineering Resilient Collective Adaptive Systems by Self-Stabilisation},
	year = {2018},
	issue_date = {April 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {28},
	number = {2},
	issn = {1049-3301},
	url = {https://doi.org/10.1145/3177774},
	doi = {10.1145/3177774},
	abstract = {Collective adaptive systems are an emerging class of networked computational systems particularly suited for application domains such as smart cities, complex sensor networks, and the Internet of Things. These systems tend to feature large-scale, heterogeneity of communication model (including opportunistic peer-to-peer wireless interaction) and require inherent self-adaptiveness properties to address unforeseen changes in operating conditions. In this context, it is extremely difficult (if not seemingly intractable) to engineer reusable pieces of distributed behaviour to make them provably correct and smoothly composable.Building on the field calculus, a computational model (and associated toolchain) capturing the notion of aggregate network-level computation, we address this problem with an engineering methodology coupling formal theory and computer simulation. On the one hand, functional properties are addressed by identifying the largest-to-date field calculus fragment generating self-stabilising behaviour, guaranteed to eventually attain a correct and stable final state despite any transient perturbation in state or topology and including highly reusable building blocks for information spreading, aggregation, and time evolution. On the other hand, dynamical properties are addressed by simulation, empirically evaluating the different performances that can be obtained by switching between implementations of building blocks with provably equivalent functional properties. Overall, our methodology sheds light on how to identify core building blocks of collective behaviour and how to select implementations that improve system performance while leaving overall system function and resiliency properties unchanged.},
	journal = {ACM Trans. Model. Comput. Simul.},
	month = {mar},
	articleno = {16},
	numpages = {28},
	keywords = {simulation and modeling, self-stabilisation, field calculus, distributed algorithms, collective adaptive systems, Aggregate computing}
}


@article{CASADEI2019252,
	abstract = {The Internet of Things (IoT) is emerging as a ubiquitous and dense ecosystem in which novel devices and smart objects interoperate to establish smart cities, smart buildings, etc. In such application contexts, a plethora of innovative services are expected to stand out, deeply impacting our daily routine. In particular, real IoT drivers will be cyberphysical, collective, highly dynamic and contextualised services, called in the following Opportunistic IoT Services. This work proposes a full-fledged approach for their development, based on (i) a technology-agnostic yet detailed modelling phase, which allows opportunistic properties to emerge since the preliminary service analysis; and (ii) the implementation and further simulation of IoT services through Aggregate Computing, a distributed computing paradigm and engineering stack able to harness, in practice, the dynamic, collective and context-driven nature of Opportunistic IoT Services. A mass event case study, related to the real-world scenario of a large scale urban crowds detection and steering, provides evidence of the huge potential of the approach: indeed, simulation results highlight the effectiveness, flexibility, scalability and resilience of the Aggregate Computing-based approach to the design of Opportunistic IoT Services.},
	author = {Roberto Casadei and Giancarlo Fortino and Danilo Pianini and Wilma Russo and Claudio Savaglio and Mirko Viroli},
	doi = {https://doi.org/10.1016/j.future.2018.09.005},
	issn = {0167-739X},
	journal = {Future Generation Computer Systems},
	keywords = {Internet of Things, Opportunistic Services, Aggregate Computing},
	pages = {252-262},
	title = {Modelling and simulation of Opportunistic IoT Services with Aggregate Computing},
	url = {https://www.sciencedirect.com/science/article/pii/S0167739X18307246},
	volume = {91},
	year = {2019},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S0167739X18307246},
	bdsk-url-2 = {https://doi.org/10.1016/j.future.2018.09.005}}

@ARTICLE{7274429,
	author={Beal, Jacob and Pianini, Danilo and Viroli, Mirko},
	journal={Computer},
	title={Aggregate Programming for the Internet of Things},
	year={2015},
	volume={48},
	number={9},
	pages={22-30},
	keywords={Internet of things;Programming;Embedded systems;Internet of things;Aggregate programmin;Pervasive computing;aggregate programming;pervasive computing;field calculus;distributed systems;domain-specific languages;DSLs;embedded systems;Internet of Things;IoT},
	doi={10.1109/MC.2015.261}}

@misc{aguzzi2024macroswarm,
	title={MacroSwarm: A Field-based Compositional Framework for Swarm Programming},
	author={Gianluca Aguzzi and Roberto Casadei and Mirko Viroli},
	year={2024},
	eprint={2401.10969},
	archivePrefix={arXiv},
	primaryClass={cs.AI},
}

@ARTICLE{9927406,
	author={Aguzzi, Gianluca and Casadei, Roberto and Pianini, Danilo and Viroli, Mirko},
	journal={IEEE Internet Computing},
	title={Dynamic Decentralization Domains for the Internet of Things},
	year={2022},
	volume={26},
	number={6},
	pages={16-23},
	keywords={Sensors;Programming;Ecosystems;Monitoring;Computational modeling;Internet of Things},
	doi={10.1109/MIC.2022.3216753}}


@article{doi:10.1057/jos.2012.27,
	author = {D Pianini, S Montagna and M Viroli},
	doi = {10.1057/jos.2012.27},
	eprint = {https://doi.org/10.1057/jos.2012.27},
	journal = {Journal of Simulation},
	number = {3},
	pages = {202-215},
	publisher = {Taylor & Francis},
	title = {Chemical-oriented simulation of computational systems with ALCHEMIST},
	url = {https://doi.org/10.1057/jos.2012.27},
	volume = {7},
	year = {2013},
	bdsk-url-1 = {https://doi.org/10.1057/jos.2012.27}}


@inbook{Beal2016,
	abstract = {We live in a world with an ever-increasing density of computing devices, pervading every aspect of our environment. Programming these devices is challenging, due to their large numbers, potential for frequent and complex network interactions with other nearby devices, and the open and evolving nature of their capabilities and applications. Aggregate programming addresses these challenges by raising the level of abstraction, so that a programmer can operate in terms of collections of interacting devices. In particular, field calculus provides a safe and extensible model for encapsulation, modulation, and composition of services. On this foundation, a set of resilient ``building block'' operators support development of APIs that can provide resilience and scalability guarantees for any service developed using them. We illustrate the power of this approach by discussion of several recent applications, including crowd safety at mass public events, disaster relief operations, construction of resilient enterprise systems, and network security.},
	address = {Cham},
	author = {Beal, Jacob and Viroli, Mirko},
	booktitle = {Formal Methods for the Quantitative Evaluation of Collective Adaptive Systems: 16th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2016, Bertinoro, Italy, June 20-24, 2016, Advanced Lectures},
	doi = {10.1007/978-3-319-34096-8_8},
	editor = {Bernardo, Marco and De Nicola, Rocco and Hillston, Jane},
	isbn = {978-3-319-34096-8},
	pages = {233--260},
	publisher = {Springer International Publishing},
	title = {Aggregate Programming: From Foundations to Applications},
	url = {https://doi.org/10.1007/978-3-319-34096-8_8},
	year = {2016},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-319-34096-8_8}}


@article{ZAMBONELLI2011197,
	abstract = {Here we present the overall objectives and approach of the SAPERE (``Self-aware Pervasive Service Ecosystems'') project, focussed on the development of a highly-innovative nature-inspired framework, suited for the decentralized deployment, execution, and management, of self-aware and adaptive pervasive services in future network scenarios.},
	author = {Franco Zambonelli and Gabriella Castelli and Laura Ferrari and Marco Mamei and Alberto Rosi and Giovanna Di Marzo and Matteo Risoldi and Akla-Esso Tchao and Simon Dobson and Graeme Stevenson and Juan Ye and Elena Nardini and Andrea Omicini and Sara Montagna and Mirko Viroli and Alois Ferscha and Sascha Maschek and Bernhard Wally},
	doi = {https://doi.org/10.1016/j.procs.2011.09.006},
	issn = {1877-0509},
	journal = {Procedia Computer Science},
	keywords = {Self-awareness in Autonomic Systems, Pervasive Computing Service, Nature-inspired Computing},
	note = {Proceedings of the 2nd European Future Technologies Conference and Exhibition 2011 (FET 11)},
	pages = {197-199},
	title = {Self-aware Pervasive Service Ecosystems},
	url = {https://www.sciencedirect.com/science/article/pii/S1877050911005667},
	volume = {7},
	year = {2011},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S1877050911005667},
	bdsk-url-2 = {https://doi.org/10.1016/j.procs.2011.09.006}}

@article{10.1145/1082469.1082470,
	author = {Jelasity, M\'{a}rk and Montresor, Alberto and Babaoglu, Ozalp},
	title = {Gossip-based aggregation in large dynamic networks},
	year = {2005},
	key = {value},
	issue_date = {August 2005},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {23},
	number = {3},
	issn = {0734-2071},
	url = {https://doi.org/10.1145/1082469.1082470},
	doi = {10.1145/1082469.1082470},
	abstract = {As computer networks increase in size, become more heterogeneous and span greater geographic distances, applications must be designed to cope with the very large scale, poor reliability, and often, with the extreme dynamism of the underlying network. Aggregation is a key functional building block for such applications: it refers to a set of functions that provide components of a distributed system access to global information including network size, average load, average uptime, location and description of hotspots, and so on. Local access to global information is often very useful, if not indispensable for building applications that are robust and adaptive. For example, in an industrial control application, some aggregate value reaching a threshold may trigger the execution of certain actions; a distributed storage system will want to know the total available free space; load-balancing protocols may benefit from knowing the target average load so as to minimize the load they transfer. We propose a gossip-based protocol for computing aggregate values over network components in a fully decentralized fashion. The class of aggregate functions we can compute is very broad and includes many useful special cases such as counting, averages, sums, products, and extremal values. The protocol is suitable for extremely large and highly dynamic systems due to its proactive structure---all nodes receive the aggregate value continuously, thus being able to track any changes in the system. The protocol is also extremely lightweight, making it suitable for many distributed applications including peer-to-peer and grid computing systems. We demonstrate the efficiency and robustness of our gossip-based protocol both theoretically and experimentally under a variety of scenarios including node and communication failures.},
	journal = {ACM Trans. Comput. Syst.},
	month = {aug},
	pages = {219–252},
	numpages = {34},
	keywords = {proactive aggregation, Gossip-based protocols} }

@ARTICLE{1420661,
	author={Van Dyke Parunak, H. and Brueckner, S.A. and Matthews, R. and Sauter, J.},
	journal={IEEE Transactions on Systems, Man, and Cybernetics - Part A: Systems and Humans},
	title={Pheromone learning for self-organizing agents},
	year={2005},
	volume={35},
	number={3},
	pages={316-326},
	keywords={Insects;Systems engineering and theory;System performance;Optical modulation;Resource management;Levee;Centralized control;Complexity theory;Cooperative systems;Intelligent agent;Clustering methods;complexity theory;cooperative systems;learning;resource management},
	doi={10.1109/TSMCA.2005.846408}}


@article{swarms1,
	abstract = {In this article we present a self-organized method for allocating the individuals of a robot swarm to tasks that are sequentially interdependent. Tasks that are sequentially interdependent are common in natural and artificial systems. The proposed method does neither rely on global knowledge nor centralized components. Moreover, it does not require the robots to communicate. The method is based on the delay experienced by the robots working on one subtask when waiting for input from another subtask. We explore the capabilities of the method in different simulated environments. Additionally, we evaluate the method in a proof-of-concept experiment using real robots. We show that the method allows a swarm to reach a near-optimal allocation in the studied environments, can easily be transferred to a real robot setting, and is adaptive to changes in the properties of the tasks such as their duration. Finally, we show that the ideal setting of the parameters of the method does not depend on the properties of the environment.},
	author = {Brutschy, Arne and Pini, Giovanni and Pinciroli, Carlo and Birattari, Mauro and Dorigo, Marco},
	date = {2014/01/01},
	date-added = {2024-02-26 12:13:11 +0100},
	date-modified = {2024-02-26 12:13:11 +0100},
	doi = {10.1007/s10458-012-9212-y},
	id = {Brutschy2014},
	isbn = {1573-7454},
	journal = {Autonomous Agents and Multi-Agent Systems},
	number = {1},
	pages = {101--125},
	title = {Self-organized task allocation to sequentially interdependent tasks in swarm robotics},
	url = {https://doi.org/10.1007/s10458-012-9212-y},
	volume = {28},
	year = {2014},
	bdsk-url-1 = {https://doi.org/10.1007/s10458-012-9212-y}}

@INPROCEEDINGS{7306601,
	author={Clark, Shane S. and Beal, Jacob and Pal, Partha},
	booktitle={2015 IEEE 9th International Conference on Self-Adaptive and Self-Organizing Systems},
	title={Distributed Recovery for Enterprise Services},
	year={2015},
	volume={},
	number={},
	pages={111-120},
	keywords={Servers;Monitoring;Electronic mail;Logic gates;Databases;Reliability;Sockets;enterprise systems;aggregate programming;protelis;distributed algorithms},
	doi={10.1109/SASO.2015.19}}

@inproceedings{10.1145/2800835.2809508,
	author = {Ferscha, Alois},
	title = {Collective adaptive systems},
	year = {2015},
	isbn = {9781450335751},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2800835.2809508},
	doi = {10.1145/2800835.2809508},
	abstract = {Collective Adaptive System (CAS) as a broad term refers to todays observable indications of a deployment of Information and Communication Technologies (ICT) at a very large scale (e.g. 3.5*109 personal computers, 6.2*109 smart phones, 1.1*109 cars on planet). Taking such a massive ICT deployment, it is not just considered possible, but already a reality that these are programmed to operate cooperatively as very large scale collectives. As for example, smartphone apps have demonstrated globe-spanning cooperative sensing applications, liquid democracy applications, logistics and traffic management applications, energy management applications, etc.One essential aspect of such globe-spanning ICT collectives is that they often exhibit properties typical observed in complex systems, like (i) spontaneous, dynamic network configuration, with (ii) individual nodes acting in parallel, (iii) constantly acting and reacting to what the other agents are doing, and (iv) where the control tends to be highly dispersed and decentralized. If there is to be any coherent behavior observed on the level of the collective (macro-level), it (v) it usually arises from competition and cooperation among the individual elements (micro-level). The overall behavior of the collective (macro-behaviour) is the result of (vi) a huge number of decisions made every moment by many individual entities (micro-interactions), possibly leading to (vii) the emergence of unexpected phenomena.A critical challenge for CAS is to design and implement collectives able to operate in a more or less autonomous way, with little or no human interaction. In this endeavor, self-adaptation and self-management have emerged as two interrelated facets of CASs.Self-adaptive collectives in a top down strategy evaluate their own global behavior and change it when the evaluation indicates that they are not accomplishing what they were intended to do, or when better function or performance is possible. Here a challenge is to identify how to change the behaviors of the individuals so as to achieve the desired collective improvement. In self-managing collectives, individuals interact locally, typically according to a small set simple rules. Achieving a desirable collective behaviour is attempted with a bottom up strategy, in that local interaction policies are adopted so as to steer global behavior. Self-organisation is the process of enabling a system to change its organisation in case of environmental changes without explicit external command. We can distinguish between: weak self-organisation where from an internal point of view, there is re-organisation under an internal central control or planning; and strong-selforganisation (also referred to as "emergence"), where there is re-organisation with no explicit central control, either internal or external [1]. Building upon the mechanisms of self-adaptation and self-management, we may ask the questions on the potentials and opportunities of turning massively deployed systems to a globe spanning superorganism of socially interactive elements [2]. While the individual elements are of heterogeneous provenance and typically act autonomously, we can assume that they can (and will) self-configure into large scale cooperative collectives, either with or without human governance [3,4]. We may not assume a common objective or central control, but rather volatile network topologies, codependence and internal competition, non-linear and non-continuous dynamics, and sub-ideal, failure prone operation. The recent literature has referred to these emerging massive collectives as "superorganisms" [5], since they exhibit properties of a living organism (like e.g. 'collective intelligence') on its own. In order to properly exploit such superorganisms, we need to develop a deeper scientific understanding of the foundational principles by which they operate.},
	booktitle = {Adjunct Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing and Proceedings of the 2015 ACM International Symposium on Wearable Computers},
	pages = {893–895},
	numpages = {3},
	keywords = {collective adaptive systems, pervasive computing, self-organization, superorganism, wearable computing},
	location = {Osaka, Japan},
	series = {UbiComp/ISWC'15 Adjunct}
}