@startuml


interface Network<ID> {
    + write(message: OutboundMessage<ID>)
    + read(): Collection<InboundMessage<ID>>
}

class Collektive<ID, R> {
    + localId: ID
    - computeFunction: (Aggregate<ID>.() -> R)
    + cycle(): R
    + cycleWhile(condition: (AggregateResult<ID, R>) -> Boolean): R
}

class AggregateResult<ID, R> {
    + localId: ID
    + result: R
    + toSend: Iterable<OutboundMessage<ID>>
    + newState: State
}

class Aggregate{
    <<aggregate constructs>>
}

Collektive --> AggregateResult: uses
Collektive --> Network: uses
Collektive --> Aggregate: uses

@enduml